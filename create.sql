-- MySQL Script generated by MySQL Workbench
-- Пт 19 янв 2018 22:38:28
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema conference_scheduler
-- -----------------------------------------------------
-- Администратор создает конференцию, ее тематические секции.
-- Участник регистрируется и подает заявки на участие в секции.
-- Администратор проверяет заявку на соответствие тематике секции и
-- подтверждает или отклоняет заявку.
-- Участник может снять заявку, задать вопрос администратору.

-- -----------------------------------------------------
-- Schema conference_scheduler
--
-- Администратор создает конференцию, ее тематические секции.
-- Участник регистрируется и подает заявки на участие в секции.
-- Администратор проверяет заявку на соответствие тематике секции и
-- подтверждает или отклоняет заявку.
-- Участник может снять заявку, задать вопрос администратору.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `conference_scheduler` DEFAULT CHARACTER SET utf8 ;
USE `conference_scheduler` ;

-- -----------------------------------------------------
-- Table `conference_scheduler`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`user` (
  `u_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  `u_username` VARCHAR(16) NOT NULL,
  `u_password` CHAR(32) NOT NULL COMMENT 'Хэш пароля',
  `u_email` VARCHAR(255) NOT NULL,
  `u_first_name` VARCHAR(45) NOT NULL COMMENT 'Имя',
  `u_last_name` VARCHAR(45) NOT NULL COMMENT 'Фамилия',
  `u_is_admin` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Является ли администратором',
  PRIMARY KEY (`u_id`),
  UNIQUE INDEX `username_UNIQUE` (`u_username` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Пользователь. Так как присутствует всего 2 роли и нет информации о возможном добавлении ролей в будущем\nпросто добавил атрибут is_admin. Проверка при создании конференции, заявки, вопроса осуществляется тригерром.';


-- -----------------------------------------------------
-- Table `conference_scheduler`.`conference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`conference` (
  `c_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор конференции',
  `c_name` VARCHAR(255) NOT NULL COMMENT 'Название конференции\nУникально',
  `c_description` TEXT NOT NULL,
  `c_address` VARCHAR(255) NULL COMMENT 'Адрес проведения\nМожет быть неизвестен заранее',
  `c_datetime` DATE NULL COMMENT 'Время проведения\nМожет быть неизвестно заранее',
  `c_u_id` INT UNSIGNED NOT NULL COMMENT 'Администратор\nПроверка триггером',
  PRIMARY KEY (`c_id`),
  INDEX `fk_conference_user1_idx` (`c_u_id` ASC),
  UNIQUE INDEX `c_name_UNIQUE` (`c_name` ASC)  COMMENT 'Название конференции должно быть уникально',
  CONSTRAINT `fk_conference_user1`
    FOREIGN KEY (`c_u_id`)
    REFERENCES `conference_scheduler`.`user` (`u_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Конференция.'
ROW_FORMAT = DEFAULT;


-- -----------------------------------------------------
-- Table `conference_scheduler`.`section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`section` (
  `s_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  `s_topic` VARCHAR(255) NOT NULL COMMENT 'Тема секции',
  `s_c_id` INT UNSIGNED NOT NULL COMMENT 'Конференция к которой секция относится',
  PRIMARY KEY (`s_id`),
  INDEX `fk_section_conferences_idx` (`s_c_id` ASC),
  UNIQUE INDEX `s_topic_and_s_c_id_UNIQUE` (`s_c_id` ASC, `s_topic` ASC)  COMMENT 'Темы секции в рамках одной конференции должны быть уникальны',
  CONSTRAINT `fk_section_conferences`
    FOREIGN KEY (`s_c_id`)
    REFERENCES `conference_scheduler`.`conference` (`c_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Секция конференции, представляет тематический подраздел.';


-- -----------------------------------------------------
-- Table `conference_scheduler`.`proposal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`proposal` (
  `p_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  `p_title` VARCHAR(255) NOT NULL COMMENT 'Название доклада',
  `p_description` TEXT NOT NULL COMMENT 'Описание доклада',
  `p_s_id` INT UNSIGNED NOT NULL COMMENT 'Секция конференции в которую подана заявка',
  `p_u_id` INT UNSIGNED NOT NULL COMMENT 'Участник отправивший заявку\nНе может быть администратором.\nПроверка триггером',
  `p_status` ENUM('PENDING', 'REJECTED', 'APPROVED') NOT NULL DEFAULT 'PENDING' COMMENT 'Статус заявки',
  PRIMARY KEY (`p_id`),
  INDEX `fk_proposal_section1_idx` (`p_s_id` ASC),
  INDEX `fk_proposal_user1_idx` (`p_u_id` ASC),
  CONSTRAINT `fk_proposal_section1`
    FOREIGN KEY (`p_s_id`)
    REFERENCES `conference_scheduler`.`section` (`s_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_proposal_user1`
    FOREIGN KEY (`p_u_id`)
    REFERENCES `conference_scheduler`.`user` (`u_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Заявка на участие в конференции';


-- -----------------------------------------------------
-- Table `conference_scheduler`.`question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`question` (
  `q_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  `q_text` TEXT NOT NULL COMMENT 'Вопрос',
  `q_u_id` INT UNSIGNED NOT NULL COMMENT 'Участник задавший вопрос\nПроверка триггером. Администратор\nне может задать вопрос',
  `q_c_id` INT UNSIGNED NOT NULL COMMENT 'Конференция по которой задан вопрос',
  PRIMARY KEY (`q_id`),
  INDEX `fk_question_participant1_idx` (`q_u_id` ASC),
  INDEX `fk_question_conference1_idx` (`q_c_id` ASC),
  CONSTRAINT `fk_question_user1`
    FOREIGN KEY (`q_u_id`)
    REFERENCES `conference_scheduler`.`user` (`u_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_question_conference1`
    FOREIGN KEY (`q_c_id`)
    REFERENCES `conference_scheduler`.`conference` (`c_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Вопрос заданный участником администратору конференции. Сделал связь через таблицу conference т.к. администратор может управлять\nнесколькими конференциями и необходимо знать к какой конкретно конференции относится вопрос.';


-- -----------------------------------------------------
-- Table `conference_scheduler`.`message`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conference_scheduler`.`message` (
  `m_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  `m_text` TEXT NOT NULL COMMENT 'Текст сообщения',
  `m_q_id` INT UNSIGNED NOT NULL COMMENT 'Вопрос к которому это сообщение относится',
  `m_u_id` INT UNSIGNED NOT NULL COMMENT 'Пользователь отправивший сообщение',
  `m_create_time` TIMESTAMP NOT NULL COMMENT 'Время создания сообщения.\nЗадается триггером.',
  PRIMARY KEY (`m_id`),
  INDEX `fk_message_question1_idx` (`m_q_id` ASC),
  INDEX `fk_message_participant1_idx` (`m_u_id` ASC),
  CONSTRAINT `fk_message_question1`
    FOREIGN KEY (`m_q_id`)
    REFERENCES `conference_scheduler`.`question` (`q_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_message_user1`
    FOREIGN KEY (`m_u_id`)
    REFERENCES `conference_scheduler`.`user` (`u_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Сообщение в рамках вопроса по конференции';

USE `conference_scheduler`;

DELIMITER $$
USE `conference_scheduler`$$
CREATE TRIGGER `conference_scheduler`.`c_permit_insert_when_user_is_admin` BEFORE INSERT ON `conference` FOR EACH ROW
BEGIN
 DECLARE is_admin Bool;
 SELECT `u_is_admin`
 INTO is_admin
 FROM `user`
 WHERE `u_id`= NEW.`c_u_id`;
 IF is_admin = false THEN
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only administrator can create conference', MYSQL_ERRNO = 1001;
 END IF;
END$$

USE `conference_scheduler`$$
CREATE DEFINER = CURRENT_USER TRIGGER `conference_scheduler`.`p_permit_insert_when_user_is_participant` BEFORE INSERT ON `proposal` FOR EACH ROW
BEGIN
	DECLARE is_admin Bool;
	SELECT `u_is_admin`
	INTO is_admin
    FROM `user`
	WHERE `u_id` = NEW.`p_u_id`;
	IF is_admin = true THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only participant can create proposal', MYSQL_ERRNO = 1001;
	END IF;
END$$

USE `conference_scheduler`$$
CREATE DEFINER = CURRENT_USER TRIGGER `conference_scheduler`.`q_permit_insert_when_user_is_participant` BEFORE INSERT ON `question` FOR EACH ROW
BEGIN
	DECLARE is_admin Bool;
	SELECT `u_is_admin`
	INTO is_admin
    FROM `user`
	WHERE `u_id` = NEW.`q_u_id`;
	IF is_admin = true THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only participant can create question', MYSQL_ERRNO = 1001;
	END IF;
END$$

USE `conference_scheduler`$$
CREATE
DEFINER = CURRENT_USER
TRIGGER `conference_scheduler`.`m_set_time_BEFORE_INSERT`
BEFORE INSERT ON `message` FOR EACH ROW
SET NEW.`m_create_time` = NOW();$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
