package by.epam.tc.conference.dao.mysql.pool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class ConnectorImpl implements Connector {

    private final ConnectionPool connectionPool;
    private Connection connection;
    private int transactionStackSize;

    public ConnectorImpl(ConnectionPool connectionPool) {
        this.connectionPool = connectionPool;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException,
            ConnectionPoolException {
        if (connection == null) {
            connection = connectionPool.takeConnection();
        }
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException, ConnectionPoolException {
        return prepareStatement(sql, Statement.NO_GENERATED_KEYS);
    }

    public void startTransaction() throws SQLException, ConnectionPoolException {
        if (connection == null) {
            connection = connectionPool.takeConnection();
        }
        connection.setAutoCommit(false);
        transactionStackSize++;
    }

    public void commitTransaction() throws SQLException {
        if (transactionStackSize == 0) {
            throw new IllegalStateException("Transaction wasn't started. So you can't commit it");
        }
        decrementTransactionCount();
        if (transactionStackSize == 0) {
            connection.commit();
            connection.setAutoCommit(true);
            closeConnection();
        }
    }

    public void rollback() throws SQLException {
        if (transactionStackSize == 0) {
            throw new IllegalStateException("Transaction wasn't started. So you can't rollback");
        }
        transactionStackSize = 0;
        connection.rollback();
        connection.setAutoCommit(true);
        closeConnection();
    }

    public void closeConnection() {
        if (transactionStackSize == 0) {
            connectionPool.putConnection(connection);
            connection = null;
        }
    }

    private void decrementTransactionCount() {
        if (--transactionStackSize < 0) {
            throw new IllegalStateException("Transaction count can't be negative");
        }
    }
}
