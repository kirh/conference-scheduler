package by.epam.tc.conference.dao.mysql.connector;

import by.epam.tc.conference.dao.mysql.pool.ConnectionPoolException;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * An object that hides inside all connection management logic exposing only necessary methods
 */
public interface Connector {

    /**
     * Creates precompiled sql statement<br>
     * Generated key flag values:<br>
     * {@link java.sql.Statement#RETURN_GENERATED_KEYS}<br>
     * {@link java.sql.Statement#NO_GENERATED_KEYS}
     *
     * @param sql               query to execute
     * @param autoGeneratedKeys indicates whether a resulting object  will have the capability of
     *                          returning auto-generated keys or not.
     * @return a new PreparedStatement object, containing the pre-compiled SQL statement
     * @throws SQLException            if a database access error occurs or the given parameter is not
     *                                 a Statement constant indicating whether auto-generated keys should be returned
     * @throws ConnectionPoolException when failed to retrieve connection from pool     *
     */
    PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException;

    /**
     * Starts transaction. To commit you should invoke commitTransaction or rollback method
     *
     * @throws SQLException            if a database access error occurs
     * @throws ConnectionPoolException when failed to retrieve connection from pool
     */
    void startTransaction() throws SQLException;

    /**
     * Makes all changes made since the startTransaction permanent and releases connection
     * If this method was invoked from another transaction context, then it will do nothing
     *
     * @throws SQLException if a database access error occurs
     */
    void commitTransaction() throws SQLException;

    /**
     * Undoes all changes made in the current transaction and all other transaction context
     * Releases connection.
     *
     * @throws SQLException if a database access error occurs
     */
    void rollback() throws SQLException;

    /**
     * If there is no transaction context then it will release connection,
     * otherwise it will do nothing
     */
    void closeConnection();
}
